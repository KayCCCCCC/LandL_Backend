# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'

services:
  server:
    build:
      context: .
      target: final
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__PgDbConnection=Server=database;Database=LandL;User ID=postgres;Password=postgres;Trust Server Certificate=true;
    ports:
      - 8080:8080 # Map host port 8080 to container port 8080

  server1:
    build:
      context: .
      target: final
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__PgDbConnection=Server=database;Database=LandL;User ID=postgres;Password=postgres;Trust Server Certificate=true;
    ports:
      - 8081:8080 # Map host port 8081 to container port 8080

  server2:
    build:
      context: .
      target: final
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__PgDbConnection=Server=database;Database=LandL;User ID=postgres;Password=postgres;Trust Server Certificate=true;
    ports:
      - 8082:8080 # Map host port 8082 to container port 8080

  database:
    image: postgres:latest
    container_name: database
    environment:
      - POSTGRES_DB=LandL
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - 5435:5432 # Exposing port 5432 of the database container to port 5435 on the host

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - 80:8080 # Exposing port 80 for HTTP traffic on the host to port 80 in the container
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mounting the custom Nginx configuration
    depends_on:
      - server
      - server1
      - server2

volumes:
  pg_data:

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
